package zm.com.self.zmlife.datebasedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zm.com.self.zmlife.entity.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name_yang = new Property(1, String.class, "name_yang", false, "NAME_YANG");
        public final static Property Price_yang = new Property(2, float.class, "price_yang", false, "PRICE_YANG");
        public final static Property Name_shen = new Property(3, String.class, "name_shen", false, "NAME_SHEN");
        public final static Property Price_shen = new Property(4, float.class, "price_shen", false, "PRICE_SHEN");
        public final static Property Name_zhang = new Property(5, String.class, "name_zhang", false, "NAME_ZHANG");
        public final static Property Price_zhang = new Property(6, float.class, "price_zhang", false, "PRICE_ZHANG");
        public final static Property Date = new Property(7, String.class, "date", false, "DATE");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME_YANG\" TEXT," + // 1: name_yang
                "\"PRICE_YANG\" REAL NOT NULL ," + // 2: price_yang
                "\"NAME_SHEN\" TEXT," + // 3: name_shen
                "\"PRICE_SHEN\" REAL NOT NULL ," + // 4: price_shen
                "\"NAME_ZHANG\" TEXT," + // 5: name_zhang
                "\"PRICE_ZHANG\" REAL NOT NULL ," + // 6: price_zhang
                "\"DATE\" TEXT);"); // 7: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name_yang = entity.getName_yang();
        if (name_yang != null) {
            stmt.bindString(2, name_yang);
        }
        stmt.bindDouble(3, entity.getPrice_yang());
 
        String name_shen = entity.getName_shen();
        if (name_shen != null) {
            stmt.bindString(4, name_shen);
        }
        stmt.bindDouble(5, entity.getPrice_shen());
 
        String name_zhang = entity.getName_zhang();
        if (name_zhang != null) {
            stmt.bindString(6, name_zhang);
        }
        stmt.bindDouble(7, entity.getPrice_zhang());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(8, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name_yang = entity.getName_yang();
        if (name_yang != null) {
            stmt.bindString(2, name_yang);
        }
        stmt.bindDouble(3, entity.getPrice_yang());
 
        String name_shen = entity.getName_shen();
        if (name_shen != null) {
            stmt.bindString(4, name_shen);
        }
        stmt.bindDouble(5, entity.getPrice_shen());
 
        String name_zhang = entity.getName_zhang();
        if (name_zhang != null) {
            stmt.bindString(6, name_zhang);
        }
        stmt.bindDouble(7, entity.getPrice_zhang());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(8, date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name_yang
            cursor.getFloat(offset + 2), // price_yang
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name_shen
            cursor.getFloat(offset + 4), // price_shen
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name_zhang
            cursor.getFloat(offset + 6), // price_zhang
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName_yang(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrice_yang(cursor.getFloat(offset + 2));
        entity.setName_shen(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice_shen(cursor.getFloat(offset + 4));
        entity.setName_zhang(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrice_zhang(cursor.getFloat(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
